#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
//CREATION OF THE BITMAP WAS TAKEN FROM https://gist.github.com/guohai/5848088

// for Linux platform, plz make sure the size of data type is correct for BMP spec.
// if you use this on Windows or other platforms, plz pay attention to this.
typedef int LONG;
typedef unsigned char BYTE;
typedef unsigned int DWORD;
typedef unsigned short WORD;
typedef unsigned long KEY;

// __attribute__((packed)) on non-Intel arch may cause some unexpected error, plz be informed.

typedef struct tagBITMAPFILEHEADER{
    WORD    bfType; // 2  /* Magic identifier */
    DWORD   bfSize; // 4  /* File size in bytes */
    WORD    bfReserved1; // 2
    WORD    bfReserved2; // 2
    DWORD   bfOffBits; // 4 /* Offset to image data, bytes */
} __attribute__((packed)) BITMAPFILEHEADER;

typedef struct tagBITMAPINFOHEADER{
    DWORD    biSize; // 4 /* Header size in bytes */
    LONG     biWidth; // 4 /* Width of image */
    LONG     biHeight; // 4 /* Height of image */
    WORD     biPlanes; // 2 /* Number of colour planes */
    WORD     biBitCount; // 2 /* Bits per pixel */
    DWORD    biCompress; // 4 /* Compression type */
    DWORD    biSizeImage; // 4 /* Image size in bytes */
    LONG     biXPelsPerMeter; // 4
    LONG     biYPelsPerMeter; // 4 /* Pixels per meter */
    DWORD    biClrUsed; // 4 /* Number of colours */
    DWORD    biClrImportant; // 4 /* Important colours */
} __attribute__((packed)) BITMAPINFOHEADER;

typedef struct data_pack{
    int healthpoints;
    float multiplier;
    char* name;
    unsigned int str;
    short dex;
    unsigned short wis;
    short intel;
    short con;
    char* pet;
    short pet_str;
}data_pack;
/*
typedef struct tagRGBQUAD
{
    unsigned char    rgbBlue;
    unsigned char    rgbGreen;
    unsigned char    rgbRed;
    unsigned char    rgbReserved;
} RGBQUAD;
* for biBitCount is 16/24/32, it may be useless
*/

typedef struct{
        BYTE    b;
        BYTE    g;
        BYTE    r;
} RGB_data; // RGB TYPE, plz also make sure the order

int bmp_generator(char *filename, int width, int height, unsigned char *data){
    BITMAPFILEHEADER bmp_head;
    BITMAPINFOHEADER bmp_info;
    int size = width * height * 3;

    bmp_head.bfType = 0x4D42; // 'BM'
    bmp_head.bfSize= size + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER); // 24 + head + info no quad
    bmp_head.bfReserved1 = bmp_head.bfReserved2 = 0;
    bmp_head.bfOffBits = bmp_head.bfSize - size;
    // finish the initial of head

    bmp_info.biSize = 40;
    bmp_info.biWidth = width;
    bmp_info.biHeight = height;
    bmp_info.biPlanes = 1;
    bmp_info.biBitCount = 24; // bit(s) per pixel, 24 is true color
    bmp_info.biCompress = 0;
    bmp_info.biSizeImage = size;
    bmp_info.biXPelsPerMeter = 0;
    bmp_info.biYPelsPerMeter = 0;
    bmp_info.biClrUsed = 0 ;
    bmp_info.biClrImportant = 0;
    // finish the initial of infohead;

    // copy the data
    FILE *fp;
    if (!(fp = fopen(filename,"wb"))) return 0;

    fwrite(&bmp_head, 1, sizeof(BITMAPFILEHEADER), fp);
    fwrite(&bmp_info, 1, sizeof(BITMAPINFOHEADER), fp);
    fwrite(data, 1, size, fp);
    fclose(fp);

    return 1;
}

void decode1(){// https://stackoverflow.com/questions/46354887/read-color-bytes-rgb-from-a-bitmap
    //this function just gets the GBR values for each color
int width, height, padding, bitcount, size;
    unsigned char *data = 0;
    unsigned char info[54] = { 0 };
    FILE *file = fopen("test.bmp", "rb");
    if(!file)
        return 0;

    fread(info, 1, 54, file);
    width = *(int*)(info + 18);
    height = *(int*)(info + 22);
    bitcount = *(int*)(info + 28);
    size = ((width * bitcount + 31) / 32) * 4 * height;
    padding = width % 4;
    if(bitcount != 24) //this code works for 24-bit bitmap only
        goto error;

    data = malloc(size);
    fread(data, 1, size, file);
    for(int row = height - 1; row >= 0; row--)
    {
        for(int col = 0; col < width; col++)
        {
            int p = (row * width + col) * 3 + row * padding;
            printf("%02X%02X%02X ", data[p + 0], data[p + 1], data[p + 2]);
        }
        printf("\n");
    }
    error:
    if(file) fclose(file);
    if(data) free(data);
    return 0;
}

const char* decode2(){//  modified from https://stackoverflow.com/questions/46354887/read-color-bytes-rgb-from-a-bitmap
    int width, height, padding, bitcount, size;
    unsigned char *data = 0;
    unsigned char info[54] = { 0 };
    FILE *file = fopen("test.bmp", "rb");
    if(!file)
        return 0;

    fread(info, 1, 54, file);
    width = *(int*)(info + 18);
    height = *(int*)(info + 22);
    bitcount = *(int*)(info + 28);
    size = ((width * bitcount + 31) / 32) * 4 * height;
    padding = width % 4;
    if(bitcount != 24) //this code works for 24-bit bitmap only
        goto error;

    data = malloc(size);
    char* information = malloc(5);
    memset(information,0,5);
    fread(data, 1, size, file);
    for(int row = 0; row == 0; row--)
    {
        for(int col = 0; col < 2; col++)
        {
            int p = (row * width + col) * 3 + row * padding;
            char *temp[3];
            snprintf(temp, 3, "%02X", data[p+0]);
            strncat(information, temp,2);
        }
    }
    information[9] = '\0';
    //printf(information);
    //printf("\n");
    return information;
    error:
    if(file) fclose(file);
    if(data) free(data);
}

const char* decode3(){//  modified from https://stackoverflow.com/questions/46354887/read-color-bytes-rgb-from-a-bitmap
    int width, height, padding, bitcount, size;
    unsigned char *data = 0;
    unsigned char info[54] = { 0 };
    FILE *file = fopen("test.bmp", "rb");
    if(!file)
        return 0;

    fread(info, 1, 54, file);
    width = *(int*)(info + 18);
    height = *(int*)(info + 22);
    bitcount = *(int*)(info + 28);
    size = ((width * bitcount + 31) / 32) * 4 * height;
    padding = width % 4;
    if(bitcount != 24) //this code works for 24-bit bitmap only
        goto error;

    data = malloc(size);
    char* information = malloc(5);
    memset(information, 0, 5);
    fread(data, 1, size, file);
    for(int row = 0; row == 0; row--)
    {
        for(int col = 0; col < 2; col++)
        {
            int p = (row * width + col) * 3 + row * padding;
            char *temp[3];
            snprintf(temp, 3, "%02X", data[p+1]);
            strncat(information, temp,2);
        }
    }
    error:
    if(file) fclose(file);
    if(data) free(data);
    return information;
}

const char* hex_to_bianary(char *hex){//Don't look at me I'm ugly
    int i = 0;
    char* bin = malloc(sizeof(hex)*8);
    memset(bin,0,sizeof(bin));
        //char charcter = hex;
    while(hex[i] != '\0'){
        if(hex[i] == '0'){
            strncat(bin,"0000",4);
        }
        if(hex[i] == '1'){
            strncat(bin,"0001",4);
        }
        if(hex[i] == '2'){
            strncat(bin,"0010",4);
        }
        if(hex[i] == '3'){
            strncat(bin,"0011",4);
        }
        if(hex[i] == '4'){
            strncat(bin,"0100",4);
        }
        if(hex[i] == '5'){
            strncat(bin,"0101",4);
        }
        if(hex[i] == '6'){
            strncat(bin,"0110",4);
        }
        if(hex[i] == '7'){
            strncat(bin,"0111",4);
        }
        if(hex[i] == '8'){
            strncat(bin,"1000",4);
        }
        if(hex[i] == '9'){
            strncat(bin,"1001",4);
        }
        if(hex[i] == 'A'){
            strncat(bin,"1010",4);
        }
        if(hex[i] == 'B'){
            strncat(bin,"1011",4);
        }
        if(hex[i] == 'C'){
            strncat(bin,"1100",4);
        }
        if(hex[i] == 'D'){
            strncat(bin,"1101",4);
        }
        if(hex[i] == 'E'){
            strncat(bin,"1110",4);
        }
        if(hex[i] == 'F'){
            strncat(bin,"1111",4);
        }
        i+=1;
    }
    return bin;
}

int bin_to_dec(char* n){
    int dec = 0, rem;
    int i = 0;
    int j = 0;
    while (n[i] != '\0') {
        int result = 1;
        int exp = i;
        if(n[i] == '1'){
            while(exp != 0){
                result *= 2;
                exp--;
            }
            dec = dec + result;
        }
        ++i;
    }
    return dec;
}

const char* indexing(int x, int y){
        int width, height, padding, bitcount, size;
    unsigned char *data = 0;
    unsigned char info[54] = { 0 };
    FILE *file = fopen("test.bmp", "rb");
    if(!file)
        return 0;

    fread(info, 1, 54, file);
    width = *(int*)(info + 18);
    height = *(int*)(info + 22);
    bitcount = *(int*)(info + 28);
    size = ((width * bitcount + 31) / 32) * 4 * height;
    padding = width % 4;
    if(bitcount != 24) //this code works for 24-bit bitmap only
        goto error;

    data = malloc(size);
    char* information = malloc(5);
    memset(information, 0, 5);
    fread(data, 1, size, file);
    for(int row = x; row == x; row--)
    {
        for(int col = y; col == y; col++)
        {
            int p = (row * width + col) * 3 + row * padding;
            char *temp[7];
            snprintf(temp, 7, "%02X%02X%02X", data[p+0], data[p+1], data[p+2]);
            strncat(information, temp,6);
        }
    }
    error:
    if(file) fclose(file);
    if(data) free(data);
    //printf(information);
    //printf("\n");
    return information;
}

const char* xor(char* key, char* pad){
    int i = 0;
    char* output = malloc(sizeof(pad));
    memset(output,0,strlen(output));
    while(pad[i] != '\0'){
    if(key[i] ==  '1'){
        if (pad[i] != '1'){
            strncat(output, "1", 1);
            }
        else{
            strncat(output, "0", 1);
        }
        }
    else if(pad[i]=='1'){
            strncat(output, "1", 1);
        }
    else{
        strncat(output, "0", 1);
    }
    i=i+1;
    }
    return output;
}

void store_data(struct data_pack data){
    //int healthpoints; float multiplier; char* name; unsigned int str; short dex; unsigned short wis; short intel  short con  char* pet; short pet_str;
    FILE * file = fopen("./data.txt", "w");
    fprintf(file, "%i", data.healthpoints);
    fprintf(file, "\n");
    fprintf(file, "%f", data.multiplier);
    fprintf(file, "\n");
    fprintf(file, "%s", data.name);
    fprintf(file, "\n");
    fprintf(file, "%i", data.str);
    fprintf(file, "\n");
    fprintf(file, "%i", data.dex);
    fprintf(file, "\n");
    fprintf(file, "%i", data.wis);
    fprintf(file, "\n");
    fprintf(file, "%i", data.intel);
    fprintf(file, "\n");
    fprintf(file, "%i", data.con);
    fprintf(file, "\n");
    fprintf(file, "%s", data.pet);
    fprintf(file, "\n");
    fprintf(file, "%i", data.pet_str);
    fprintf(file, "\n");

    fclose(file);
}

void store_encrypt(char* ab, struct data_pack data){
    FILE * file = fopen("./datae.txt", "w");
    char* atoi_data = malloc(50);
    memset(atoi_data,0,strlen(atoi_data));
    fprintf(file, "%s", xor(ab,itoa(data.healthpoints, atoi_data, 2)));
    fprintf(file, "\n");
    fprintf(file, "%f", data.multiplier);
    fprintf(file, "\n");
    fprintf(file, "%s", data.name);
    fprintf(file, "\n");
    fprintf(file, "%i", data.str);
    fprintf(file, "\n");
    fprintf(file, "%i", data.dex);
    fprintf(file, "\n");
    fprintf(file, "%i", data.wis);
    fprintf(file, "\n");
    fprintf(file, "%i", data.intel);
    fprintf(file, "\n");
    fprintf(file, "%i", data.con);
    fprintf(file, "\n");
    fprintf(file, "%s", data.pet);
    fprintf(file, "\n");
    fprintf(file, "%i", data.pet_str);
    fprintf(file, "\n");

    fclose(file);
}

bool check(struct data_pack data, char* ab){//data is planetext
    char* atoi_data = malloc(20);
    char* fileText = malloc(100);
    memset(fileText,0,strlen(fileText));
    FILE * file = fopen("./datae.txt", "r");
    fscanf(file, "%[^\n]", fileText);
    printf("%s", itoa(data.healthpoints, atoi_data, 2));
    printf("----------");
    printf("%s", xor(ab,fileText));
    if(strcmp(itoa(data.healthpoints, atoi_data, 2), xor(ab,fileText))==0){
        return true;
    }
    return false;
}

void set_data(){
    data_pack pack = {0,0,0,0,0,0,0,0,0,0};
}

int main(int argc, char **argv)
{
    srand(time(0));
    int i,j;
    RGB_data buffer[256][256];
    memset(buffer, 0, sizeof(buffer));

    for (i = 0; i < 256; i++)//all of the pixels, 256 by 256
    {
        for (j = 0; j < 256; j++)// y pixels
        {
            buffer[i][j].g = 0x00+(rand() % 255);
            buffer[i][j].b = 0x00+(rand() % 255);
            buffer[i][j].r = 0x00+(rand() % 255);
        }
    }
    bmp_generator("./test.bmp", 256, 256 , (BYTE*)buffer);
    const char* first = decode2();
    const char* second = decode3();
    int x = bin_to_dec(hex_to_bianary(first))/256;
    int y = bin_to_dec(hex_to_bianary(first))%256;
    const char* a  = indexing(x,y);
    x = bin_to_dec(hex_to_bianary(second))/256;
    y = bin_to_dec(hex_to_bianary(second))%256;
    const char* b = indexing(x,y);
    char* ab = malloc(12);
    memset(ab,0,strlen(ab));
    strncat(ab, a, 6);
    strncat(ab, b, 6);
    ab = hex_to_bianary(ab);
    //printf("%s",ab);
    //int healthpoints; float multiplier; char* name; unsigned int str; short dex; unsigned short wis; short intel  short con  char* pet; short pet_str;
    data_pack pack = {111,1.1,"doc",111,123,22,2,5,"dog",17};
    char* atoi_data = malloc(50);
    memset(atoi_data,0,strlen(atoi_data));
    printf("%s",xor(ab,itoa(pack.healthpoints, atoi_data, 2)));
    printf("\n");
    store_data(pack);
    store_encrypt(ab, pack);
    char* answer;
    //printf("\n");
    //printf("\n");
    //printf(bin_to_dec("1101111"));
    //printf("\n");
    scanf ("%d", &answer);
    if(!check(pack, ab)){
        printf("false");
    }

    return EXIT_SUCCESS;
}
